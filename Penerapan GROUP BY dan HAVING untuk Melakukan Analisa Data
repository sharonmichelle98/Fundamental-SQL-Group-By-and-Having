/*Sekarang, kita akan mencoba menggunakan GROUP BY dan HAVING untuk melakukan analisa terhadap tabel-tabel yang sudah kita kenali sebelumnya 
Hal pertama yang akan kita lakukan adalah menganalisa customer id yang melakukan perpindahan subscription*/
SELECT customer_id FROM subscription GROUP BY customer_id HAVING COUNT (customer_id) > 1;

--Lalu, kita akan mencoba menampilkan perubahan langganan dari customer yang melakukan perpindahan tersebut
SELECT customer_id, product_id, subscription_date
FROM subscription
WHERE customer_id IN
(SELECT customer_id
FROM subscription
GROUP BY customer_id
HAVING COUNT(customer_id) > 1)
ORDER BY customer_id ASC;

--Supaya terlihat jelas data-datanya, kita akan mencoba untuk menampilkan detail data dari konsumen yang melakukan perubahan langgannan tersebut
SELECT b.name,
b.address,
b.phone,
a.product_id,
a.subscription_date 
FROM subscription a 
JOIN customer b 
ON a.customer_id=b.id
WHERE b.id IN 
(SELECT customer_id 
FROM subscription 
GROUP BY customer_id 
HAVING COUNT(customer_id) > 1) 
ORDER BY b.id ASC;

/*Setelah kita menerapkannya pada tabel subscription, sekarang saatnya kita akan menerapkannya pada tabel invoice
dengan kondisi untuk mendapatkan nilai maksimum, minimum, dan rata-rata dari total price dan pinalty*/

--Menggunakan GROUP BY terlebih dahulu untuk mencari nilai maksimum total price
SELECT product_id, MAX(total_price) AS total FROM invoice GROUP BY product_id;

--Lalu, mulai menggunakan GROUP BY dengan HAVING dengan kondisi nilai maksimum total price diatas 100.000
SELECT product_id, MAX(total_price) AS total FROM invoice GROUP BY product_id HAVING MAX(total_price) > 100000;

--Setelah itu, menggunakannya lagi terhadap nilai pinalty dengan kondisi nilai maksimum pinalty diatas 30.000
SELECT product_id, MAX(pinalty) AS total FROM invoice GROUP BY product_id HAVING MAX(pinalty) > 30000;

--Menggunakan GROUP BY terlebih dahulu untuk mencari nilai minimum total price
SELECT product_id, MIN(total_price) AS total FROM invoice GROUP BY product_id;

--Lalu, mulai menggunakan GROUP BY dengan HAVING dengan kondisi nilai minimum total price dibawah 500.000
SELECT product_id, MIN(total_price) AS total FROM invoice GROUP BY product_id HAVING MIN(total_price) < 500000;

--Setelah itu, menggunakannya lagi terhadap nilai pinalty dengan kondisi nilai minimum pinalty dibawah 50.000
SELECT product_id, MIN(pinalty) AS total FROM invoice GROUP BY product_id HAVING MIN(pinalty) < 50000;

--Menggunakan GROUP BY terlebih dahulu untuk mencari nilai rata-rata total price
SELECT product_id, AVG(total_price) AS total FROM invoice GROUP BY product_id;

--Lalu, mulai menggunakan GROUP BY dengan HAVING dengan kondisi nilai rata-rata total price diatas 100.000
SELECT product_id, MAX(total_price) AS total FROM invoice GROUP BY product_id HAVING AVG(total_price) > 100000;

--Setelah itu, menggunakannya lagi terhadap nilai pinalty dengan kondisi nilai rata-rata pinalty diatas 30.000
SELECT product_id, MAX(pinalty) AS total FROM invoice GROUP BY product_id HAVING AVG(pinalty) > 30000;

/*Setelah berkutat dengan nilai maksimum, minimum, dan rata-rata dari total price dan pinalty, sekarang saatnya kita akan mencoba
menggunakan GROUP BY dan HAVING untuk mencari produk mana yang jumlah customernya paling banyak mendapatkan pinalty*/
SELECT product_id, AVG(pinalty), COUNT(customer_id) AS total FROM invoice GROUP BY product_id HAVING COUNT(customer_id) > 20;
